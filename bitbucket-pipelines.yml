image: node:8.11.3

pipelines:
  default:
    - step:
        name: Static & Unit & Integration tests
        caches:
          - node
        script:
          - npm install
          - npm run validate
          - node_modules/lerna/bin/lerna.js bootstrap
          - cd services/sre
          - npm install aix-sre
          - cd ../../
          - cp .env.example .env
          - npm test
  branches:
    develop:
    - step:
        name: Unit & Integration Tests
        caches:
          - node
        script: # Modify the commands below to build your repository.
          - npm install
          - npm run validate
          - node_modules/lerna/bin/lerna.js bootstrap
          - cd services/sre
          - npm install aix-sre
          - cd ../../
          - cp .env.example .env
          - npm test
    - step:
        name: Build Docker Image, Tag and Push to AWS ECS
        deployment: test
        trigger: manual
        script:
          - export AWS_ENV=dev
          - export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
          - export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
          - export AWS_S3_BUCKET=aix-next-dev-terraform-state
          - export AWS_ECR_ID=258544608464
          - export AWS_ECS_SERVICE_NAME=aix-staging
          - ./deploy.sh
        services:
          - docker
    # QA Env
    test:
    - step:
        name: Unit Tests
        caches:
          - node
        script: # Modify the commands below to build your repository.
          - npm install
          - npm run validate
          # - npm test
    - step:
        name: Build Docker Image, Tag and Push to AWS ECS
        script:
          - export AWS_ENV=qa
          - export AWS_ACCESS_KEY_ID=${QA_AWS_ACCESS_KEY_ID}
          - export AWS_SECRET_ACCESS_KEY=${QA_AWS_SECRET_ACCESS_KEY}
          - export AWS_S3_BUCKET=aix-next-qa-terraform-state
          - export AWS_ECR_ID=138985840327
          - export AWS_ECS_SERVICE_NAME=aix
          - ./deploy.sh
        services:
          - docker
    staging:
    - step:
        name: Build Docker Image, Tag and Push to AWS ECS
        script:
          # Setup dependencies.
          - mkdir -p ~/bin
          - cd ~/bin
          - export PATH="$PATH:/root/bin"
          - apt-get update && apt-get install -y python-pip libpython-dev unzip git

          # Dependency: Terraform.
          - wget https://releases.hashicorp.com/terraform/0.11.7/terraform_0.11.7_linux_amd64.zip
          - unzip terraform_0.11.7_linux_amd64.zip

          # Dependency: AWS CLI
          - export AWS_ACCESS_KEY_ID=${STAGING_AWS_ACCESS_KEY_ID}
          - export AWS_SECRET_ACCESS_KEY=${STAGING_AWS_SECRET_ACCESS_KEY}
          - pip install awscli
          - aws s3 cp s3://aix-next-terraform-state/terraform/access.tf ${BITBUCKET_CLONE_DIR}/terraform/access.tf
          - aws s3 cp s3://aix-next-terraform-state/terraform/aix-next-deployment.pem ${BITBUCKET_CLONE_DIR}/terraform/aix-next-deployment.pem
          - aws s3 cp s3://aix-next-terraform-state/terraform/aix-next-deployment_pub.pem  ${BITBUCKET_CLONE_DIR}/terraform/aix-next-deployment_pub.pem

          # copy the same keys to standard system to be able to push to git repo
          - cp ${BITBUCKET_CLONE_DIR}/terraform/aix-next-deployment.pem ~/.ssh/id_rsa
          - ssh-keygen -f ${BITBUCKET_CLONE_DIR}/terraform/aix-next-deployment_pub.pem -i -mPKCS8 > ~/.ssh/id_rsa.pub
          - chmod 400 ~/.ssh/id_rsa.pub
          - chmod 400 ~/.ssh/id_rsa

          # git tag & autoversening
          - git config --global user.email "cristin.iosif@heron.ai"
          - git config --global user.name "Bitbucket pipeline"
          - cd ${BITBUCKET_CLONE_DIR}
          - VERSION=$(npm version patch -m "%s [skip CI]")
          - VERSION=$(echo $VERSION | cut -c 2-)
          - git tag $VERSION
          - echo $VERSION is the latest version
          - git push origin staging
          - git push origin --tags

          # Build docker with version tag
          - aws s3 cp s3://aix-next-terraform-state/env-vars/env ${BITBUCKET_CLONE_DIR}/.env
          - docker build -t aix:$VERSION .
          - cd ${BITBUCKET_CLONE_DIR}/ && docker build -t aix:latest .
          - docker tag aix:latest aix:$VERSION

          # Push image to ECR
          - aws ecr get-login --no-include-email --region eu-central-1 | /bin/bash
          - aws ecr describe-repositories --region eu-central-1
          - docker tag aix:$VERSION 978051284110.dkr.ecr.eu-central-1.amazonaws.com/aix:$VERSION
          - docker tag aix:$VERSION 978051284110.dkr.ecr.eu-central-1.amazonaws.com/aix:latest
          - docker push 978051284110.dkr.ecr.eu-central-1.amazonaws.com/aix:$VERSION
          - docker push 978051284110.dkr.ecr.eu-central-1.amazonaws.com/aix:latest
          # update the ECS service with forceNewDeployment always latest version
          - aws ecs update-service --region eu-central-1 --cluster fargate --service aix --task-definition aix --desired-count 1 --force-new-deployment
          # Provision Terraform resources.
          - cd ${BITBUCKET_CLONE_DIR}/terraform
          # - terraform init
          # - terraform import aws_key_pair.deployer aix-deployment | true
          # - terraform import aws_ecr_repository.service aix-ecr-repository | true
          # - terraform refresh

          # Ensure Terraform syntax is valid before proceeding.
          # - terraform validate

          # Ensure this step passes so that the state is always pushed.
          # - terraform apply -auto-approve
        services:
          - docker